# Contoh data dalam satu kolom
data <- read_excel("C:/Users/asus/Downloads/Klasifikasi Tingkat Kemiskinan di Indonesia.xlsx")
# Membagi data ke dalam bentuk matrix
matrix_data <- matrix(data$Variable, ncol = n, byrow = TRUE)
data
# Menentukan jumlah baris per record
n <- 13
# Membagi data ke dalam bentuk matrix
matrix_data <- matrix(data$Variable, ncol = n, byrow = TRUE)
# Mengubah matrix kembali menjadi data frame
result <- as.data.frame(matrix_data)
result
write_xlsx(result, "C:/Users/asus/Downloads/data_kemiskinan.xlsx")
cor(x= c(38,45,46,30,53,54,61,50,52,51,69,53), y = c(60,50,62,40,68,59,79,69,65,70,89,79))
cor(c(4,8,12,16),c(5,10,15,20))
library(shiny)
library(digest)  # Untuk hashing
# Simpan hash dari password yang benar
password_hash <- digest("password123", algo = "sha256")
# UI
ui <- fluidPage(
titlePanel("Dashboard dengan Password Hashing"),
div(
id = "login",
textInput("username", "Username"),
passwordInput("password", "Password"),
actionButton("login_btn", "Login")
),
hidden(
div(
id = "dashboard",
h2("Selamat Datang di Dashboard!"),
# Tambahkan fitur dashboard di sini
p("Konten rahasia...")
)
)
)
# Server
server <- function(input, output, session) {
observeEvent(input$login_btn, {
# Hash password yang diinputkan dan cek dengan hash yang disimpan
if (input$username == "userku" && digest(input$password, algo = "sha256") == password_hash) {
shinyjs::hide("login")
shinyjs::show("dashboard")
} else {
showModal(modalDialog(
title = "Gagal Login",
"Username atau password salah.",
easyClose = TRUE
))
}
})
}
# Jalankan aplikasi
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny)
library(digest)  # Untuk hashing
# Simpan hash dari password yang benar
password_hash <- digest("password123", algo = "sha256")
# UI
ui <- fluidPage(
titlePanel("Dashboard dengan Password Hashing"),
div(
id = "login",
textInput("username", "Username"),
passwordInput("password", "Password"),
actionButton("login_btn", "Login")
),
hidden(
div(
id = "dashboard",
h2("Selamat Datang di Dashboard!"),
# Tambahkan fitur dashboard di sini
p("Konten rahasia...")
)
)
)
# Server
server <- function(input, output, session) {
observeEvent(input$login_btn, {
# Hash password yang diinputkan dan cek dengan hash yang disimpan
if (input$username == "userku" && digest(input$password, algo = "sha256") == password_hash) {
shinyjs::hide("login")
shinyjs::show("dashboard")
} else {
showModal(modalDialog(
title = "Gagal Login",
"Username atau password salah.",
easyClose = TRUE
))
}
})
}
# Jalankan aplikasi
shinyApp(ui = ui, server = server)
# Tambahkan library yang diperlukan
library(shiny)
library(digest)
library(shinyjs)
# Aktifkan penggunaan shinyjs
ui <- fluidPage(
useShinyjs(),
titlePanel("Dashboard dengan Password Hashing"),
div(
id = "login",
textInput("username", "Username"),
passwordInput("password", "Password"),
actionButton("login_btn", "Login")
),
hidden(
div(
id = "dashboard",
h2("Selamat Datang di Dashboard!"),
p("Konten rahasia...")
)
)
)
# Simpan hash dari password yang benar
password_hash <- digest("password123", algo = "sha256")
# Server
server <- function(input, output, session) {
observeEvent(input$login_btn, {
if (input$username == "userku" && digest(input$password, algo = "sha256") == password_hash) {
shinyjs::hide("login")
shinyjs::show("dashboard")
} else {
showModal(modalDialog(
title = "Gagal Login",
"Username atau password salah.",
easyClose = TRUE
))
}
})
}
# Jalankan aplikasi
shinyApp(ui = ui, server = server)
install.packages("bslib")
knitr::opts_chunk$set(echo = TRUE)
# Memuat pustaka yang diperlukan
library(dplyr)
library(ggplot2)
library(readxl)
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/Data cluster.xlsx")
data
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/data_reglog.xlsx")
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
data
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
data
# Membuat model regresi logistik
model <- glm(Cluster ~ Industry + `Traffic Cat` + `GOS Cat`, data = data, family = binomial)
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
data
# Membuat model regresi logistik
model <- glm(Cluster ~ Industry + `Traffic Cat` + `GOS Cat`, data = data, family = binomial)
# Menampilkan ringkasan model
summary(model)
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
# Membuat model regresi logistik
model <- glm(Cluster ~ Industry + `Traffic Cat` + `GOS Cat`, data = data, family = binomial)
# Menampilkan ringkasan model
summary(model)
exp(coef(model))
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
# Membuat model regresi logistik
model <- glm(Cluster ~ `Industry Cat` + `Traffic Cat` + `GOS Cat`, data = data, family = binomial)
# Menampilkan ringkasan model
summary(model)
exp(coef(model))
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
data$`Industry Cat` <- relevel(data$`Industry Cat`, ref = "1")
data
data$`Industry Cat` <- as.factor(data$`Industry Cat`)
data$`Traffic Cat` <- as.factor(data$`Traffic Cat`)
data$`GOS Cat` <- as.factor(data$`GOS Cat`)
data$`Industry Cat` <- relevel(data$`Industry Cat`, ref = "1")
data$`Traffic Cat` <- relevel(data$`Traffic Cat`, ref = "1")
data$`GOS Cat` <- relevel(data$`GOS Cat`, ref = "1")
# Membuat model regresi logistik
model <- glm(Cluster ~ `Industry Cat` + `Traffic Cat` + `GOS Cat`, data = data, family = binomial)
# Menampilkan ringkasan model
summary(model)
exp(coef(model))
# Contoh data
# Pastikan dataset Anda sudah tersedia dalam format seperti ini
data <- read_xlsx("E:/OneDrive/Personal/Journal/Jurnal 1/3. Hasil Pengolahan/reglog_data.xlsx")
data$`Industry Cat` <- as.factor(data$`Industry Cat`)
data$`Traffic Cat` <- as.factor(data$`Traffic Cat`)
data$`GOS Cat` <- as.factor(data$`GOS Cat`)
data$`Industry Cat` <- relevel(data$`Industry Cat`, ref = "1")
data$`Traffic Cat` <- relevel(data$`Traffic Cat`, ref = "1")
data$`GOS Cat` <- relevel(data$`GOS Cat`, ref = "0")
# Membuat model regresi logistik
model <- glm(Cluster ~ `Industry Cat` + `Traffic Cat` + `GOS Cat`, data = data, family = binomial)
# Menampilkan ringkasan model
summary(model)
exp(coef(model))
exp(cbind(OddsRatio = coef(model), confint(model)))
# Membuat model regresi logistik
model <- glm(Cluster ~ `Industry Cat` + `Traffic Cat` + `GOS Cat`, data = data)
# Menampilkan ringkasan model
summary(model)
exp(cbind(OddsRatio = coef(model), confint(model)))
data$`Industry Cat` <- relevel(data$`Industry Cat`, ref = "0")
data$`Traffic Cat` <- relevel(data$`Traffic Cat`, ref = "0")
data$`GOS Cat` <- relevel(data$`GOS Cat`, ref = "1")
# Membuat model regresi logistik
model <- glm(Cluster ~ `Industry Cat` + `Traffic Cat` + `GOS Cat`, data = data, family = binomial)
# Menampilkan ringkasan model
summary(model)
exp(cbind(OddsRatio = coef(model), confint(model)))
shiny::runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
source("E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard/ui/ui_body.R")
runApp()
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
calculate_per_capita <- function(adhb, population) {
adhb_long <- adhb %>%
tidyr::pivot_longer(cols = starts_with("2017") | starts_with("2018") | starts_with("2019") | starts_with("2020"),
names_to = "year_quarter", values_to = "PDRB") %>%
mutate(
year = as.numeric(substr(year_quarter, 1, 4)),
quarter = as.numeric(substr(year_quarter, 6, 6))
)
adhb_long <- adhb_long %>%
left_join(population, by = c("year" = "periode")) %>%
mutate(PDRB_per_capita = PDRB / population)
adhb_wide <- adhb_long %>%
select(flag, kode, nama, year_quarter, PDRB_per_capita) %>%
tidyr::pivot_wider(names_from = year_quarter, values_from = PDRB_per_capita)
return(adhb_wide)
}
# Panggil fungsi untuk menghitung PDRB per kapita
adhb_perkapita <- calculate_per_capita(adhb, population)
adhb <- gsheet2tbl('docs.google.com/spreadsheets/d/1zX-sS-QRhgQw8N5I0OU-Su06NBRm66J1/edit?gid=326092188#gid=326092188') %>%
mutate(kode = factor(kode)) %>%
mutate(across(4:ncol(.), ~ round(., 4)))
calculate_per_capita <- function(adhb, population) {
adhb_long <- adhb %>%
tidyr::pivot_longer(cols = starts_with("2017") | starts_with("2018") | starts_with("2019") | starts_with("2020"),
names_to = "year_quarter", values_to = "PDRB") %>%
mutate(
year = as.numeric(substr(year_quarter, 1, 4)),
quarter = as.numeric(substr(year_quarter, 6, 6))
)
adhb_long <- adhb_long %>%
left_join(population, by = c("year" = "periode")) %>%
mutate(PDRB_per_capita = PDRB / population)
adhb_wide <- adhb_long %>%
select(flag, kode, nama, year_quarter, PDRB_per_capita) %>%
tidyr::pivot_wider(names_from = year_quarter, values_from = PDRB_per_capita)
return(adhb_wide)
}
# Panggil fungsi untuk menghitung PDRB per kapita
adhb_perkapita <- calculate_per_capita(adhb, population)
population <- gsheet2tbl('docs.google.com/spreadsheets/d/1ACQnSbPG6oDPEc0o3oVF-gdyoImhSXzLe0rS3d_xxiQ/edit?gid=0#gid=0')
# Panggil fungsi untuk menghitung PDRB per kapita
adhb_perkapita <- calculate_per_capita(adhb, population)
adhb_perkapita
View(adhb_perkapita)
calculate_per_capita <- function(adhb, population) {
# Menentukan kolom-kolom yang mengandung data tahun secara dinamis
tahun_columns <- grep("^\\d{4}", names(adhb), value = TRUE)
# Pivot data dari wide ke long berdasarkan kolom tahun yang ditemukan
adhb_long <- adhb %>%
tidyr::pivot_longer(cols = all_of(tahun_columns),
names_to = "year_quarter", values_to = "PDRB") %>%
mutate(
year = as.numeric(substr(year_quarter, 1, 4)),  # Extract tahun
quarter = as.numeric(substr(year_quarter, 6, 6))  # Extract triwulan
)
# Menggabungkan dengan data populasi
adhb_long <- adhb_long %>%
left_join(population, by = c("year" = "periode")) %>%
mutate(PDRB_per_capita = PDRB / population)
# Pivot kembali menjadi wide untuk setiap tahun dan triwulan
adhb_wide <- adhb_long %>%
select(flag, kode, nama, year_quarter, PDRB_per_capita) %>%
tidyr::pivot_wider(names_from = year_quarter, values_from = PDRB_per_capita)
return(adhb_wide)
}
# Panggil fungsi untuk menghitung PDRB per kapita
adhb_perkapita <- calculate_per_capita(adhb, population)
adhb_perkapita
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
View(adhb_perkapita)
is.na(adhb_perkapita)
sumis.na(adhb_perkapita)
sum(is.na(adhb_perkapita))
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
shiny::runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp()
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp()
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
shiny::runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
shiny::runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
# DATA ADHB ==================================================================
# adhb <- gsheet2tbl('docs.google.com/spreadsheets/d/1zX-sS-QRhgQw8N5I0OU-Su06NBRm66J1/edit?gid=326092188#gid=326092188') %>%
adhb <- read_xlsx("E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard/data/data_pdrb_adhb.xlsx") %>%
mutate(kode = factor(kode)) %>%
mutate(across(4:ncol(.), ~ round(., 4)))
# Libraries
library(shiny)
library(shinydashboard)
library(dplyr)
library(plotly)
library(dplyr)
library(readxl)
library(openxlsx)
library(ggplot2)
library(DT)
library(writexl)
library(ggplot2)
library(RColorBrewer)
library(gsheet)
library(readxl)
library(dplyr)
# DATA ADHB ==================================================================
# adhb <- gsheet2tbl('docs.google.com/spreadsheets/d/1zX-sS-QRhgQw8N5I0OU-Su06NBRm66J1/edit?gid=326092188#gid=326092188') %>%
adhb <- read_xlsx("E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard/data/data_pdrb_adhb.xlsx") %>%
mutate(kode = factor(kode)) %>%
mutate(across(4:ncol(.), ~ round(., 4)))
# DATA PERKAPITA =============================================================
# population <- gsheet2tbl('docs.google.com/spreadsheets/d/1ACQnSbPG6oDPEc0o3oVF-gdyoImhSXzLe0rS3d_xxiQ/edit?gid=0#gid=0')
population <- read_xlsx("E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard/data/population.xlsx")
calculate_per_capita <- function(adhb, population) {
# Menentukan kolom-kolom yang mengandung data tahun secara dinamis
tahun_columns <- grep("^\\d{4}", names(adhb), value = TRUE)
# Pivot data dari wide ke long berdasarkan kolom tahun yang ditemukan
adhb_long <- adhb %>%
tidyr::pivot_longer(cols = all_of(tahun_columns),
names_to = "year_quarter", values_to = "PDRB") %>%
mutate(
year = as.numeric(substr(year_quarter, 1, 4)),  # Extract tahun
quarter = as.numeric(substr(year_quarter, 6, 6))  # Extract triwulan
)
# Menggabungkan dengan data populasi
adhb_long <- adhb_long %>%
left_join(population, by = c("year" = "periode")) %>%
mutate(PDRB_per_capita = PDRB / population)
# Pivot kembali menjadi wide untuk setiap tahun dan triwulan
adhb_wide <- adhb_long %>%
select(flag, kode, nama, year_quarter, PDRB_per_capita) %>%
tidyr::pivot_wider(names_from = year_quarter, values_from = PDRB_per_capita)
return(adhb_wide)
}
# Panggil fungsi untuk menghitung PDRB per kapita
adhb_perkapita <- calculate_per_capita(adhb, population)
adhb_perkapita
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
adhb_perkapita
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
shiny::runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
# Load necessary libraries
library(plotly)
# Sample data
data <- data.frame(
kode = c("1", "2", "3", "4", "5"),
nama = c(
"Pertanian, Kehutanan, dan Perikanan",
"Pertambangan dan Penggalian",
"Industri Pengolahan",
"Konstruksi",
"Perdagangan Besar dan Eceran"
),
nilai_pdrb = c(800000, 600000, 1200000, 700000, 500000),
kontribusi = c(20, 15, 30, 17.5, 12.5) # in percentage
)
data
# Create the bar plot using plotly
bar_plot <- plot_ly(
data,
x = ~kontribusi,
y = ~reorder(nama, kontribusi),
type = 'bar',
orientation = 'h',
text = ~paste0("Kontribusi: ", kontribusi, "%\nNilai PDRB: ", nilai_pdrb),
textposition = 'auto',
marker = list(color = 'rgba(58, 71, 80, 0.8)', line = list(color = 'rgba(58, 71, 80, 1.0)', width = 1.5))
) %>%
layout(
title = "Kontribusi Lapangan Usaha Utama terhadap PDRB",
xaxis = list(title = "Kontribusi (%)"),
yaxis = list(title = "Lapangan Usaha"),
margin = list(l = 150)
)
# Display the plot
bar_plot
# Create the bar plot using plotly
bar_plot <- ggplot(data, aes(x = reorder(nama, -kontribusi), y = kontribusi, fill = nama)) +
geom_bar(stat = "identity", width = 0.7, show.legend = FALSE) +
geom_text(aes(label = paste0(kontribusi, "%\n", "(", nilai_pdrb, ")")),
position = position_stack(vjust = 0.5),
color = "white",
size = 3.5) +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Kontribusi Lapangan Usaha Utama terhadap PDRB",
x = "Lapangan Usaha",
y = "Kontribusi (%)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(hjust = 0.5, face = "bold")
)
# Display the plot
print(bar_plot)
# Load necessary libraries
library(ggplot2)
# Sample data
data <- data.frame(
kode = c("1", "2", "3", "4", "5"),
nama = c(
"Pertanian, Kehutanan, dan Perikanan",
"Pertambangan dan Penggalian",
"Industri Pengolahan",
"Konstruksi",
"Perdagangan Besar dan Eceran"
),
nilai_pdrb = c(800000, 600000, 1200000, 700000, 500000),
kontribusi = c(20, 15, 30, 17.5, 12.5) # in percentage
)
# Create the row bar plot
bar_plot <- ggplot(data, aes(x = kontribusi, y = reorder(nama, kontribusi), fill = nama)) +
geom_bar(stat = "identity", width = 0.7, show.legend = FALSE) +
geom_text(aes(label = paste0(kontribusi, "%\n", "(", nilai_pdrb, ")")),
position = position_stack(vjust = 0.5),
color = "white",
size = 3.5) +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Kontribusi Lapangan Usaha Utama terhadap PDRB",
x = "Kontribusi (%)",
y = "Lapangan Usaha"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold")
)
# Display the plot
print(bar_plot)
# Load necessary libraries
library(ggplot2)
# Sample data
data <- data.frame(
kode = c("1", "2", "3", "4", "5"),
nama = c(
"Pertanian, Kehutanan, dan Perikanan",
"Pertambangan dan Penggalian",
"Industri Pengolahan",
"Konstruksi",
"Perdagangan Besar dan Eceran"
),
nilai_pdrb = c(800000, 600000, 1200000, 700000, 500000),
kontribusi = c(20, 15, 30, 17.5, 12.5) # in percentage
)
# Create the row bar plot
bar_plot <- ggplot(data, aes(x = kontribusi, y = reorder(nama, kontribusi), fill = nama)) +
geom_bar(stat = "identity", width = 0.7, show.legend = FALSE) +
geom_text(aes(label = paste0(kontribusi, "%\n", "(", nilai_pdrb, ")")),
position = position_stack(vjust = 0.5),
color = "white",
size = 3.5) +
labs(
title = "Kontribusi Lapangan Usaha Utama terhadap PDRB",
x = "Kontribusi (%)",
y = "Lapangan Usaha"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = "bold")
)
# Display the plot
print(bar_plot)
data
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
runApp('E:/OneDrive/Work/Training/BPS Orientation/PDRB/gdp-dashboard')
